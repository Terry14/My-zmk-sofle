#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    basegame: basegame {
        compatible = "zmk,behavior-tap-dance";
        label = "BASEGAME";
        #binding-cells = <0>;
        bindings = <&to 0>, <&to 2>;
    };

    tph: tph {
        compatible = "zmk,behavior-hold-tap";
        label = "TPH";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <140>;
        flavor = "tap-preferred";
    };

    capsdance: capsdance {
        compatible = "zmk,behavior-tap-dance";
        label = "CAPSDANCE";
        #binding-cells = <0>;
        tapping-term-ms = <140>;
        bindings = <&caps_word>, <&kp CAPS>;
    };

    backlight_scroll: backlight_scroll {
        compatible = "zmk,behavior-sensor-rotate-var";
        label = "BACKLIGHT_SCROLL";
        #sensor-binding-cells = <2>;
        tap-ms = <100>;
        bindings = <&rgb_ug>, <&rgb_ug>;
    };

    l_parrow: l_parrow {
        compatible = "zmk,behavior-mod-morph";
        label = "L_PARROW";
        bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    r_parrow: r_parrow {
        compatible = "zmk,behavior-mod-morph";
        label = "R_PARROW";
        bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp ESC     &kp N5           &kp N4           &kp N3        &kp N2             &kp N1     &kp UP_ARROW     &kp N6     &kp N7              &kp N8            &kp N9              &kp N0               &kp BACKSPACE
&kp TAB     &kp Q            &kp W            &kp F         &kp P              &kp B      &kp DOWN_ARROW   &kp J      &kp L               &kp U             &kp Y               &kp APOS             &none
&capsdance  &kp A            &kp R            &kp S         &kp S              &kp T      &kp LEFT_ARROW   &kp M      &kp N               &kp E             &kp I               &kp O                &none
&kp LSHFT   &tph LEFT_WIN Z  &tph LEFT_ALT X  &tph LCTRL C  &tph LEFT_SHIFT D  &kp V      &kp RIGHT_ARROW  &kp K      &tph RIGHT_SHIFT H  &tph RCTRL COMMA  &tph RIGHT_ALT DOT  &tph RIGHT_WIN FSLH  &none
&basegame   &kp LCTRL        &none            &kp ESC       &kp SPACE          &kp TAB    &kp TAB          &kp ENTER  &kp BACKSPACE       &kp DEL           &none               &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "Base";
        };

        BT_RGB {
            bindings = <
&out OUT_TOG     &bt BT_SEL 4     &bt BT_SEL 3     &bt BT_SEL 2     &bt BT_SEL 1     &bt BT_SEL 0    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans           &trans           &trans           &trans           &trans           &bt BT_CLR      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&none            &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans
&rgb_ug RGB_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans           &trans           &trans           &trans           &trans           &trans          &trans  &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&backlight_scroll RGB_BRI RGB_BRD>;
        };

        Game {
            bindings = <
&kp ESC  &kp N5     &kp N4     &kp N3    &kp N2     &kp N1    &trans  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &trans
&kp N6   &kp TAB    &kp Q      &kp W     &kp E      &kp R     &trans  &kp T   &kp Y   &kp U   &kp I   &kp O   &kp P
&kp N7   &kp LSHFT  &kp A      &kp S     &kp D      &kp F     &trans  &kp G   &kp H   &kp J   &kp K   &kp L   &trans
&kp N8   &kp LCTRL  &kp Z      &kp X     &kp C      &kp V     &trans  &kp B   &kp N   &kp M   &trans  &trans  &trans
&trans   &kp N9     &kp LCTRL  &kp LALT  &kp SPACE  &mo 3     &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        Game_Mirror {
            bindings = <
&kp ESC   &kp N0        &kp N9     &kp N8    &kp N7     &kp N6    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp P     &kp O         &kp I      &kp U     &kp Y      &kp T     &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp SEMI  &kp L         &kp K      &kp J     &kp H      &kp G     &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp FSLH  &kp DOT       &kp COMMA  &kp M     &kp N      &kp B     &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans    &kp LEFT_WIN  &kp LCTRL  &kp LALT  &kp SPACE  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        Num {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &trans  &kp TILDE      &kp LBKT   &l_parrow   &r_parrow        &kp RBKT         &kp KP_NLCK
&trans  &trans    &kp DEL   &kp BSPC   &kp ENTER  &trans    &trans  &kp EXCL       &kp KP_N7  &kp KP_N8   &kp KP_N9        &kp KP_MULTIPLY  &kp SCROLLLOCK
&trans  &trans    &kp ESC   &kp SPACE  &kp TAB    &trans    &trans  &kp EQUAL      &kp KP_N4  &kp KP_N5   &kp KP_N6        &kp KP_PLUS      &kp COLON
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &trans  &kp BACKSLASH  &kp KP_N1  &kp KP_N2   &kp KP_N3        &kp SLASH        &kp PERCENT
&trans  &trans    &trans    &trans     &trans     &trans    &trans  &kp MINUS      &kp COMMA  &kp PERIOD  &kp KP_NUMBER_0  &kp KP_COMMA
            >;
        };

        Func {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans   &trans
&trans  &trans    &kp DEL   &kp BSPC   &kp ENTER  &trans    &trans  &trans  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &trans    &kp ESC   &kp SPACE  &kp TAB    &trans    &trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
&trans  &trans    &trans    &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
